[{"title":"Alist网盘部署①","date":"2023-07-23T15:52:21.000Z","url":"/2023/07/23/learning/alist/alist1/","tags":[["网盘","/tags/%E7%BD%91%E7%9B%98/"],["集成","/tags/%E9%9B%86%E6%88%90/"],["存储","/tags/%E5%AD%98%E5%82%A8/"]],"categories":[["网站","/categories/%E7%BD%91%E7%AB%99/"]],"content":"前言Alist是一个支持多存储的文件列表程序 (官方) 适合多网盘资源汇总，你可以在你的Alist里面集成几十几百个网盘同时管理，可以做好资源备份，资源细分，避免重复资源，有效利用网盘空间。 其实这个应用程序本质上就是你给Alist你的网盘访问修改权限，在你需要查看的时候由Alist查询完成给你返回结果，下载的时候也是Alist帮你去问下载链接返还给你，所以并不能加快什么网盘下载速度。 部署介绍那么介绍完了Alist，接下来就该如何部署了。 由于Alist是一个需要实时查询的应用程序，所以虽然是以网页的形式呈现给你，但是很可惜，不能使用Pages服务部署。 网上有很多在线部署的网站，vercel，render，replit等等，我们这里以render作为示范，主要是方便而且稳定。 Git仓库部署我们采用docker进行，但是render的部署只能采用仓库形式进行，我们这里使用这个仓库with_aria2 进行部署。 首先先把这个仓库fork一份到自己的GitHub仓库里面，然后访问render官网，最好使用你刚刚fork仓库的GitHub账户直接授权登录，可以在待会直接同步你的仓库过去部署。 render部署在render官网登录之后在右上角的New+选择新建一个Web Service。 然后在仓库选项里面选择自己的GitHub仓库点击 Connect 进行连接。或者也可以在下面的URL栏填入远程GitHub仓库的URL也行。 接下来我们到了部署界面，名字可以随便起，Region 是指你的服务部署到什么地区，默认就行。 在创建web服务的按钮前面有个Advanced按钮，按一下进行进阶设置。 展开高级选项后，有一个 Add Environment Variable 的按钮，这里是添加我们各种运行时环境变量的地方。 这个时候先不要动这个网页，我们先去另一个网站完成数据库的搭建。 创建数据库我们直接打开ElephantSQL官网，注册登录之后我们直接选择 Create new instance 来创建一个服务，计划我们直接选最便宜的，不要钱。 名字可以随便取。 在第二步选择 region 的时候，我们选择日本的数据中心，对中国用户比较友好。 然后我们一路next就可以创建成功了，接下来回到主页，就看到多出了一个数据库了，我们点我们数据库的名字，进入细节面板。 到这里，我们数据库的创建也算成功了。 web部署回到刚刚部署到一半的网站，点击 Add Environment Variable 添加以下的变量，根据表格填写即可。 名字 值 CDN $version/dist DB_HOST Server (不要复制括号里面的内容) DB_NAME User &amp; Default database DB_PASS Password DB_PORT 5432 DB_SSL_MODE disable DB_TYPE postgres DB_USER User &amp; Default database PORT 8080 填写好上面的环境变量后，就可以直接开始部署了。 部署完成之后就可以在你的主页看到你的网站了，自定义域名在下面有说。 如果你这里点击部署之后出现错误无法继续部署时 请看下面的内容，不然就可以看下一节自定义域名了 补救措施 如果你是点击部署后报错的话，那估计render检测到大量的人使用这个仓库直接封禁了这个仓库的使用权限。 请返回Git仓库的那一步，将仓库克隆到你的电脑里面，然后直接强制清除Git仓库状态，然后重新将文件夹内容初始化Git仓库然后上传到你自己的GitHub仓库里面进行下面的部署操作。 具体操作如下： 复制在Git仓库那一步里面的仓库克隆地址 在你的本地找到一个空文件夹，使用 git clone  命令下载全部仓库文件。 将文件夹里面的 .git 文件夹删掉，如果看不到就开启隐藏文件夹显示 在github创建一个仓库，然后将文件夹里面所有的文件上传到github里面，如果正常你的仓库应该变成了这样。 因为这里如果要说明如何用git上传到远程仓库是在太长了，如果你会的可以直接用，我这里使用直接上传的方法。 接下来就是用你这个新仓库重新去部署web服务了。 醒一醒因为服务原因，render会定期休眠不活跃的服务，如果你想要你的仓库一直保持唤醒状态，也就是不管什么时候都可以访问的话，需要访问这个网站：唤醒服务 简单注册登录之后，就可以直接新建一个服务，内容照着这样填就行了，网址换成你自己需要唤醒的网址，名字可以随便起。 自定义域名（可选）部署好了之后在主页点击自己刚刚部署的服务，进入设置，下滑就可以找到自定义域名了，这里就不过多说明了。 参考资料： Alist文档 手机搭建的alist如何分享给朋友访问？白嫖replit服务器&amp;内网穿透！ 成功通关！！ 如果这个alist教程有下一期的话估计是使用服务器搭建了吧？ "},{"title":"Python爬虫基础③","date":"2023-07-07T09:35:01.000Z","url":"/2023/07/07/learning/Python/crawler3/","tags":[["初阶","/tags/%E5%88%9D%E9%98%B6/"],["python","/tags/python/"],["数据解析","/tags/%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90/"]],"categories":[["Python","/categories/Python/"]],"content":"前言本篇的内容接上一篇 基础② ，主要讲的是爬虫登录，cookie持续登录。 我这里不重复注意事项，如果你有不明确的请去看一下上一篇爬虫基础。 在上网过程中，比如遇到了需要登录才能获取到的信息，就比如学校抢课网站，淘宝网，某些小网站都倾向于把数据都弄成登录才能访问，服务器就可以不用买太好的。 那么遇到这些问题，我们也只能让我们的爬虫程序也学会登录了。 登录有几种基本方式： 就是你通过POST请求把你的登录凭证交给服务器，服务器返还给你一个临时token，你每次请求数据带上这个临时token就行。 就是cookie登录 我们都知道，cookies是指是浏览网站时由网络服务器创建并由网页浏览器存放在用户计算机或其他设备的小文本文件。 Cookie使Web服务器能在用户的设备存储状态信息（如添加到在线商店购物车中的商品）或跟踪用户的浏览活动（如点击特定按钮、登录或记录历史）。 单次登录我这里拿某个小网站举例子，因为大部分网站都有验证码，验证码的问题未来会说怎么解决。 示例网站：练习 注册好后直接来到登录网址 进入网站首先打开控制台窗口，定位到网络选项监听。 然后输入你刚刚注册的用户名和密码登录，这个时候应该可以在旁边监听窗口看到你的登录数据包： 可以看到这种处于上面，在你点击登录按钮瞬间触发的数据包多半就是你需要的。请求方法也是POST 我们点击请求网址上面的载荷选项，就可以看到我们向服务器提交的信息了。 一般情况下，我们向服务器只会提交用户名，密码，验证码之类的信息，有时候会提交我们的token，加密数据等等之类的信息。 这次我们向这个网站提交的是token，用户名，密码。如下： 最后一个remember是你勾选了记住密码才会有的。 首先我们得先知道这里提交的所有资料代表什么，可不可以随机生成，这样子方便我们程序操作。 比如这里的token在登录页面元素的head标签里面找到。 知道了提交的东西，我们来梳理一下登录流程： 向网站请求一个登录网页，提取token 将token放进POST请求提交的数据里面提交给服务器 访问我们想要的资源 登录操作根据上面的流程，我们首先获取token： 刚刚我们已经拿到了token，存储到了token变量中，接下来我们的程序需要进行POST把获取到的数据发送到服务器进行登录，下面的程序接着上面的就可以正常运行。 进行了上面的登录程序后，下面根据我们的爬虫需要进行相关爬取即可。 要注意的是不可以用requests请求了，不然上面登录等于白费，得用cs代替requests模块即可。 cookie持续登录这里得看你是怎样对待cookie了。 如果直接写死在程序里面，更新不方便，每次cookie失效又得重新写个cookie进去，非常不方便，还不如上面的单次登录。 如果你是放在网上，可以远程获取这个cookie，也可以在线更新，而程序只要按照一个固定的URL请求就可以得到cookie，方便是方便，但总所周知，网上等于透明，你放上去就是把你的号放上去，十分不推荐。 推荐 如果你的账号不那么重要，只是做个信息查询工具的话不需要那么高安全性的话，可以尝试将cookie加密之后再存放在网上，这里推荐除了完全对称加密，其他主流加密方法都可以一试，不过你要真的不怂，完全对称加密也行。 上面工作弄完后，接下来就简单了，假设你要访问某个网站，你只需要在浏览器上面登录，然后打开控制台，定位到网络选项卡监听，在你刷新一次，这样子你就可以在请求标头里面找到cookie。 我们只需要在程序标头里面加上cookie即可，示例如下： 是不是很方便？不过前面获取cookie的过程被省略了，发挥自己实力的时候到了 好的这就是爬虫登录的所有内容了，感谢你的观看 如果有建议或者错误请指出帮助我们改正，感谢。 "},{"title":"Wallpaper Engine壁纸推荐①","date":"2023-06-16T05:47:04.000Z","url":"/2023/06/16/wallpaper/wallpapere1/","tags":[["动漫","/tags/%E5%8A%A8%E6%BC%AB/"],["人物","/tags/%E4%BA%BA%E7%89%A9/"],["风景","/tags/%E9%A3%8E%E6%99%AF/"]],"categories":[["分享","/categories/%E5%88%86%E4%BA%AB/"]],"content":"本期的壁纸分享含有的元素请见本文的的tag 由于是第一次尝试本系列，如果有考虑不周情况请各位指出，谢谢。 本文所有图片都经过压缩处理以加快本页面加载速度，不代表壁纸最终品质，Resolution栏可以帮助你快速知道壁纸的清晰度和大小。 本推荐里面携带的创意工坊链接如果失效，则为作者主动下架壁纸，可以根据名字寻找类似。 事不宜迟现在开始 Name：椎名真昼4k_120fps Type：视频 Resolution：3840 x 2160 URL： 金发，田野，齐活了 Name：Yuru Camp - Next to Spring Type：场景 Resolution：3840 x 2160 URL： 谁不喜欢摇曳露营呢？还配置了从微不足道的雾到天上的鸟儿可调选项。 配上BGM整个人都放松下来了。 Name：[4K | 可自定义] A.R.O.N.A. (碧蓝档案) Type：场景 Resolution：3840 x 2160 URL： hello各位sensei，碧蓝档案两周年的时候直接整了个大活， 咳咳咳，扯远了，壁纸是相当不错的，也是广泛自定义，带有音频响应。 Name：Subway Station Type：场景 Resolution：3840 x 2160 URL： 这个壁纸没有太多的动态部分（动的都是广告和LED屏幕），配合上BGM到是有种独特的感觉。 时钟到是藏得相当隐蔽，截图时间为15:26分，有少量可自定义选项。 Name：Bocchi the Rock! ぼっち・ざ・ろっく！(Album) Type：网页 Resolution：Dynamic URL： 孤独摇滚拉满的一款播放器壁纸，你就把它当成桌面播放器就行了，你看到的所有交互按钮都有功能。 听说把本地文件夹改一下就可以播放其他歌曲？ 不过不建议改文件夹，会出现很多奇怪的订阅bug，要改也建议自己新建另一份文件夹改动。 Name：Stellarium Type：视频 Resolution：1920 x 1080 URL： 像素风壁纸，全程视频动态，头尾可以无缝衔接，没有声音。 Name：UMP45xUMP9教堂_2K Type：视频 Resolution：2560 x 1440 URL： 唯一的缺陷是上下两条大黑边，但是这种又造成了另一种不同的观感，随个人喜欢吧，而且可以在壁纸软件里面自定义缩放填满黑边。 Name：Genshin Impact Piano Type：场景 Resolution：3840 x 2160 URL： Name：Summer feeling Type：场景 Resolution： 1920 x 1080 URL： 不知怎么的，看这张壁纸总有一种安心和平静的感觉。下面字体全部可以自定义。 Name：Walking On Air Type：场景 Resolution：3840 x 2160 URL： 天空，奇幻，BGM结合成风格独特的壁纸。 Name：桜の散る前に Type：场景 Resolution：3840 x 2160 URL： Name：Battlefield 1 -Anime Art 60FPS-2K Type：视频 Resolution：2560 x 1440 URL： 风格差异化了，部分人可能很喜欢。 Name：4K 星野爱 Hoshino Ai / Oshi no ko 我推的孩子 推しの子 Type：场景 Resolution：3840 x 2160 URL： 放在这里推荐纯粹是她实在是太刀我了，本壁纸光效是动态，其余是静态。 Name：Blue Archive - Unwelcome School [8-Bit] Type：视频 Resolution：1920 x 1080 URL： 洗脑8bit，音游玩家狂喜。 Name：EVA 明日香 asuka Type：场景 Resolution：3840 x 2160 URL： ？？我是看错了吗？？ Name：雪山与女孩_3D空间感身临其境_功夫李白 Type：场景 Resolution：unknown URL： 名字写得很清楚了。还夹一个天空之城。 Name：綾波レイAyanami Rei EVA Type：场景 Resolution： 3840 x 2160 URL： 我是， 到这里这期已经很长了，不知各位感觉如何 如果没有自己喜欢的可以评论区说一下类型，说不定下期安排上了 "},{"title":"Python爬虫基础②","date":"2023-06-10T06:35:14.000Z","url":"/2023/06/10/learning/Python/crawler2/","tags":[["初阶","/tags/%E5%88%9D%E9%98%B6/"],["python","/tags/python/"],["数据解析","/tags/%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90/"]],"categories":[["Python","/categories/Python/"]],"content":"前言本篇的内容接上一篇，主要讲的是AJAX，JSON解析和正则表达式。 我这里不重复注意事项，如果你有不明确的请去看一下上一篇爬虫基础。 AJAX交互：在使用网页中，有时候需要获取的信息放在对面服务器里并不会直接给你，而是需要你通过查询的方式才会返回相应的数据，返回的不是一整个网页，而是你所需要的数据，这样子可以减少服务器的带宽占用。 JSON是一种轻量级资料交换格式，其内容由属性和值所组成，因此也有易于阅读和处理的优势，所以大多数服务器的数据发送接收都采用JSON格式。 正则表达式作为用简单字符串来描述、匹配文中全部匹配指定格式的字符串，现在很多文本编辑器都支持用正则表达式搜索、取代匹配指定格式的字符串，检索效率能快不少。 AJAX 传统的Web允许用户端填写表单（form），当提交表单时就向网页服务器发送一个请求。服务器接收并处理传来的表单，然后送回一个新的网页，但这个做法浪费了许多带宽，因为在前后两个页面中的大部分HTML码往往是相同的。由于每次应用的沟通都需要向服务器发送请求，应用的回应时间依赖于服务器的回应时间。这导致了用户界面的回应比本机应用慢得多。 与此不同，AJAX应用可以仅向服务器发送并取回必须的数据，而不是整个网页，并在客户端采用JavaScript处理来自服务器的回应。因为在服务器和浏览器之间交换的数据大量减少，服务器回应更快了。同时，很多的处理工作可以在发出请求的客户端机器上完成，因此Web服务器的负荷也减少了。 tips 我们这里以肯德基餐厅信息查询网站作为示例，演示AJAX的特征和交互方式，以及数据获取方式。 其他很多网站都是大同小异，你还可以去一些国家政务网站资料查询那里尝试，不过一次请求就够了别短时间爬取太多次，记住之前说的注意事项就行。 怎么识别是不是AJAX呢 当你进行一次请求或者刷新操作时，网页只有一部分内容发生了变化，网址没有变化。 类似于这样 或者说网址变化了，但是你用爬虫请求该网页时，发现本该出现的数据没有出现。 例如 我们先打开肯德基餐厅信息查询网站，然后打开浏览器控制台，然后在搜索框做一次请求，在网络选项卡下面就可以看到我们做的请求了，如果请求过多不好定位，可以在类别筛选里面选择AJAX或者叫Fetch/XHR来快速找到对应请求。 这里可以看到我们做出查询的关键词来定位我们的请求。 在响应里面可以找到服务器返回给我们的数据。 因为太多这里只展示一部分。 接下来我们回到标头可以看到我们请求的网址，请求方法是POST还是GET，以及携带的表单，或者叫数据。这些数据向我们展示了如何规范地向服务区索取对应的数据，网址，格式，页码，参数等等。我们接下来的爬虫程序跟着做就行。 在前面的基础上面我们只需要对我们的请求加一点东西即可完成AJAX请求，可以看到，我们这次请求方法是POST，网址是 ，数据如上。如果要请求相同到的东西，我们只需要写出下面的代码即可。 这里的header上次讲过了，data的参数在POST里对应的就是你要向服务器提交的表单。URL对应的是上面POST请求的URL，不是你网址栏的URL 这样子，你就成功拿到了你想要的数据。 JSON解析上面我们成功拿到了数据，但是是JSON字符串格式的，我们只需要里面某个类别的数据，比如所有餐馆的名字，那该怎么办呢？ 现在就是让我们解析JSON格式数据输出的时候了。 想要使用官方自带的JSON库，我们照例还是得添加一行导入。 然后我们得把获取到的JSON数据转化为字典。 我把下面JSON格式化只是让你们看清楚层级关系，你们拿到手的JSON文本都被压缩成了一整行，想要像这样子的话网络上面有很多格式化网站可供使用。 这样子很清楚能看到层级关系，方便数据解析操作。 这样子r这个变量就变成了存储JSON的字典，按照PYTHON字典的方式控制即可 例如下面的代码就是把里面详细地址的值打印出来。 正则表达式由于讲起来可是一门很深的学问，而且挺难的，所以这里就不细讲，主要也是因为自己水平也不过关，主要说最常用的匹配操作。 ​ 以后看各位需要再看要不要跟这次爬虫一样拆成几次讲完。 这个作为强大的处理工具，按理来说你使用熟练的话可以取代掉很多其他工具的数据解析工作。比如之前的lxml，JSON，bs等等。 在Python里，用re模块来导入相应的库。 接下来书写正则表达式 例子：(把下面的google链接提取出来) 可以这样写程序： 这句表达式里面，上面一共有三个.*?，他们连在一起代表匹配多个任意字符 如果你把普通字符写在正则里面代表匹配特定字符。上面表达式的效果，匹配字符串中在async=&quot;&quot; src=&quot;和&quot;&gt;&lt;/script&gt;中间的内容，也就是 带括号的代表你要查找的部分。re.S代表查找模式，一般数据解析只需要用这个模式就行。 这就是本篇所有内容了，感谢你的观看，如果有建议或者错误请指出，感谢。 "},{"title":"孤独摇滚图片分享","date":"2023-06-08T14:37:30.000Z","url":"/2023/06/08/img/bocchi/","tags":[["图片","/tags/%E5%9B%BE%E7%89%87/"],["流量警告","/tags/%E6%B5%81%E9%87%8F%E8%AD%A6%E5%91%8A/"],["二次元","/tags/%E4%BA%8C%E6%AC%A1%E5%85%83/"]],"categories":[["分享","/categories/%E5%88%86%E4%BA%AB/"]],"content":"你看见波奇在哪里吗？ 哦，她并没有失踪，我只是想让你们都看看可爱的波奇酱。 本文作为第一篇图片分享系列，可能有许多照顾不到的画风或者风格，抱歉。 如果分享的图片侵犯了你的利益，请联系我。 因为对加载速度的妥协，本文中所有的原图请见我的网盘 P站作品ID: 102867503 p站画师名称: 🍼 可爱就完事了。 P站作品ID: 103365922 p站画师名称: JLT4n 处理得挺好的，视觉效果也不错。 P站作品ID: 107034113 p站画师名称: グムラット /Goomrrat 8说了，虹夏是大家的妈妈。 P站作品ID: 104646778 p站画师名称: Ayataka 调整了一下面部表情，更突出了画师的个人风格，挺不错的。 P站作品ID: 103584845 p站画师名称: torino 就这么说吧，炫技。 P站作品ID: 107655227 p站画师名称: ナナセミオリ 挺耐看的海报。可爱滴捏。 P站作品ID: 107365478 p站画师名称: はえもり 喜多女士不是很0啊。 P站作品ID: 103935366 p站画师名称: 豆六 完美凸显各位精神状态。 P站作品ID: 103477739 p站画师名称: JLT4n 在？没钱买水了借点钱。 P站作品ID: 108359357 p站画师名称: Rosuuri 我能去当客人吗? P站作品ID: 105655801 p站画师名称: MaeruMui 是给我庆祝生日吗？ P站作品ID: 105694344 p站画师名称: とんこつフラペチーノ 挺独特的一张，细看还是听好看的。 P站作品ID: 107025668 p站画师名称: すた0822 散发的虹夏谁不爱呢？ P站作品ID: 103933948 p站画师名称: JLT4n 风景好看，人也好看，总之好看就完事了。 P站作品ID: 101565896 p站画师名称: そめちめ 挺屑的一张波奇。 P站作品ID: 103756086 p站画师名称: Bygin-白巾 二创泳装回。 P站作品ID: 103869083 p站画师名称: 12bit 酒鬼可爱的呢。 P站作品ID: 107974742 p站画师名称: ぁ 今天感觉我摊上事了。 P站作品ID: 104753131 p站画师名称: ₀² 来点关键角色的图图。 P站作品ID: 106535620 p站画师名称: Xeph＇s Artworks 这个画师风格我挺喜欢的，ta画的波奇，凉，喜多都很不错。 建议各位去看看 P站作品ID: 102330058 p站画师名称: リチャード 风格独特，鉴定为好看。 P站作品ID: 107141390 p站画师名称: すた0822 我不行了。 第一次更新，如果有什么建议欢迎在评论区提出 如果有什么想看的主题，可以留言，说不定下次就可以看到了。 但是由于是第一次尝试，还需要一段时间适应，适应好了开第二期 "},{"title":"Steam自定义皮肤","date":"2023-06-07T13:20:46.000Z","url":"/2023/06/07/other/steamskin/","tags":[["美化","/tags/%E7%BE%8E%E5%8C%96/"],["Steam","/tags/Steam/"],["初阶","/tags/%E5%88%9D%E9%98%B6/"]],"categories":[["Steam","/categories/Steam/"]],"content":"前言写这篇文章时，Steam已经在最近的β版本中大改UI并且去掉了皮肤功能，所以不知道这玩意还能用多久或者未来Steam会不会重新开放皮肤功能，不能那就当一篇怀旧或者纪念文章吧。 本方法于2023年6月15日正式失效 本篇教程基于第三方工具Threshold-Miku进行。 准备工作前往Threshold-Miku的releases界面下载最新版的皮肤器压缩包，选择下方第一个后缀名为.zip的压缩包。 解压后应该可以看到目录下面有一个名叫install的cmd命令脚本，直接双击运行，他可以自动将皮肤器的安装步骤解决掉，然后它会自动弹出一个文件资源管理器的窗口，这个文件夹应该是在steam安装目录下面的一个skins文件夹里面，别搞错了 接着运行刚刚弹出的那个文件夹里面的Threshold Miku Customizer 2应用程序， 如果弹出了以下界面，那就可以了。 以下统称此应用为皮肤器 接下来安装PS或者print3D，如果你有其中之一就可以跳过准备工作剩下的内容。 我这里只教paint3D的安装，PS请自行寻找资源。 打开Microsoft store，搜索paint3D或者画图3D，直接安装即可 这里是链接：paint3D 修改图片打开皮肤器，上面一个选项框里面有很多选项，这里是选择不同界面的皮肤进行设置。 选择不同的界面，大部分下面都有一行建议分辨率或等比缩放，调整图片按照这个标准调就行，图片的大小最好不要超过500K。 那有些界面下面并没有建议分辨率的，请按照实际需求进行调整，比如，你喜欢steam界面拖到副屏，你的副屏是一个9:16，那么你的对应界面得按照9:16来调整。 Paint3D简单使用方法 右键需要调整的图片，选择打开方式是在Paint3D打开。 选择裁剪，输入建议分辨率，然后锁定纵横比，拖动截取框大小，然后点击完成即可。 如果图片还是太大，最简单的压缩图片大小的方法如下： 选择画布，先锁定纵横比，勾选通过画布调整图片大小，这时候输入一个较小的值，就可以顺利把图片缩小，当然图片大小也小了。 记得将图片另存为另一个文件夹里面统一管理，这样子下一步不至于找不到图片在哪 应用图片逐一在皮肤器设置新壁纸即可，没什么技术含量，下面的自定义简单介绍一下： 折叠边栏 最左边的商店，社区，库的边栏要不要显示文字，还是只剩一个图标。 有背景的网页(带URL) 这个是你的steam网页最上面需不需要显示一个网址栏，记住这个设置得和你的steam设置同步，不然会导致背景图片错位 下面点击应用即可保存皮肤设置，使用皮肤器目录下面的SteamLauncher.exe应用程序即可启动steam。 可以勾选下面的创建steam启动器快捷方式来创建一个桌面启动应用。 一定要用这个应用启动steam，不然会导致steam皮肤无法应用。 恭喜你完成本篇教程 "},{"title":"Python爬虫基础①","date":"2023-06-03T15:34:26.000Z","url":"/2023/06/03/learning/Python/crawler1/","tags":[["初阶","/tags/%E5%88%9D%E9%98%B6/"],["python","/tags/python/"],["数据解析","/tags/%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90/"]],"categories":[["Python","/categories/Python/"]],"content":"前言这篇属于是兴趣学习之余摸出来的。 顺便把bangumi网站排行榜抓取了下来，有需要可以下载过目→ANIME 在页面按下Ctrl＋F可以快速查找 注意：我不是专业学Python的，也不是专门学爬虫。只是生活中有个自动签到和获取信息解析的需求就去了解了一下爬虫，顺便学的Python。 本质上还是自己的学习记录，不是专业教程，如果需要专业指导请另寻方法。 默认你已经会了Python语言基础 如果其中有描述错误或者不明确的地方恳请指出，轻喷。谢谢！ 往下阅读的前置条件 注意事项1. 重新访问策略网站的属性之一就是经常动态变化，而爬取网站的一小部分往往需要花费几个星期或者几个月。等到网站爬虫完成它的爬取，很多事件也已经发生了，包括增加、更新和删除。 这时候又需要重新获取，十分浪费。做好计划才是重中之重。 2. 平衡礼貌策略爬虫相比于人，可以有更快的检索速度和更深的层次，所以，他们可能使一个站点瘫痪。不需要说一个单独的爬虫一秒钟要执行多条请求，下载大的文件。一个服务器也会很难响应多线程爬虫的请求。 不要设置过高访问速率 不要利用网站漏洞 不要访问禁止的资源 不要设置死循环 对这些问题的局部解决方法是漫游器排除协议（Robots exclusion protocol），也被称为robots.txt议定书，这份协议是让管理员指明网络服务器的不应该爬取的约定。这个标准没有包括重新访问一台服务器的间隔的建议，虽然设置访问间隔是避免服务器超载的最有效办法。在主域名后面接robots.txt就可以访问到服务器不希望爬虫访问的内容。例如：和本博客的。 requestsrequests作为一个优雅而简单的 Python HTTP 库，被广泛使用。 由于你的电脑并没有内置这个模块，所以使用前清先安装。 控制台输入以下命令即可安装。 现在只需要在使用前用下面语句导入requests模块直接可以使用 接下来使用下面的语句可以让你的爬虫程序获取到一个网页↓ 现在 r 这个对象里面存储了我们请求到的网页的所有信息，包括标头等一系列你之前都不会在意的信息。 不过你如果直接打印出来或者存在文件里面，会发现只打印了一个response对象，并没有网页的HTML代码，这个时候，只需要在上面稍微改进以下，在末尾加个.text就可以了，比如上面例子里面使用就可以把网页HTML代码存在 r 这个变量里了。↓ 或者不用上面的这行代码，直接使用r.text也可以看到网页的HTML代码。 接下来到数据的发送 使用下面的语句可以让你的爬虫程序发起一个POST请求，主要使用范围是给服务器发送数据，比如登录，抢购，抢课，签到等等。 这里的data字典主要是用来发送你的数据的，如何看你需要发送什么数据呢？ 只要按下F12，在选项卡里面选到网络(NETWORK)，然后做出POST请求，这时浏览器就会有一条POST记录。这里面的载荷或者叫表单，就是你要做到相同请求需要发送的数据。 记得把控制台的保存日志选项勾上 一般的服务器都会在你做出POST请求时返回给你数据，这些数据全部存储在r这个变量里。一般返回的是JSON数据，有时会返回文本或者网页。 使用requests.get获取一个网页，使用requests.post可以给服务器发送数据，除此之外，requests模块还有其他的请求类型，还有PUT，DELETE，HEAD和OPTIONS 反反爬策略2023年了，由于现在许多网站都不欢迎爬虫的爬取(毕竟要消耗大量服务器资源)，所以大多数网站都有一定的反爬策略，由于requests模块没有内置反爬措施，所以得你自己配置。 最简单的反反爬策略就是UA伪装，先简单介绍一下UA是什么，UA在浏览器里面一般是指User-Agent，一般的作用是把你浏览器和系统的信息发送给服务器，让服务器知道你的设备类型，从而更好地展示他们网站的显示内容。 如何查看自己浏览器自动发送的UA 使用大多数浏览器按下F12，都会在你的页面左边，右边或者下面弹出一个窗口，在标题栏选择网络(NETWORK)标签，进入里面，应该能看到许多由你浏览器发送或者接收到的数据，如果你没有，那就刷新一次。 在这里能很清楚看到你的浏览器发送的UA为：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36 因为requests模块没有内置UA，所以发送的get请求的UA都是和一般设备有很大区别甚至没有导致目标服务器拒绝了你的连接请求。 改进的方法也很简单，只需要把我们GET或者POST请求的UA伪造成这个浏览器的UA就行了。 进行这一个简单的改动，你的爬虫程序应该可以访问正常大部分的基础网页了。 数据解析你的爬虫程序拿到数据后，进行响应的数据解析才能把我们需要的数据从一大堆HTML代码中提取出来。 我最开始学习的是BeautifulSoup来进行数据解析，直到我发现了lxml，才发现lxml是多么简单且方便。 首先得先安装对应的库。 只需要在使用前导入响应的库就行，我们这里使用的是lxml里面的etree。 使用时，只需要我们将完整的HTML代码交给etree，剩下要做的就是提取信息。 使用下面代码可以把你的HTML文本使用etree解析。而解析后的对象被放在了tree里面 这里的r里面存储的应该是HTML代码，而不是一个response响应。 接下来我们得知道你需要提取的数据存放在代码中哪个位置 你可以直接在浏览器里面打开你需要进行提取的网址，在你需要的数据的地方点击右键，选择检查 他会把你鼠标当前指向的HTML标签给定位到，你可能需要展开标签，才能看到你需要的内容。 在你需要提取的内容点击右键，有个复制xpath的按钮，按下去就可以直接复制让etree定位你所选内容的标记。 接上面的代码，你成功复制到了xpath，你只需要输入下面的代码，把括号里面的内容写入你刚刚复制到的xpath，就可以让source变量提取到你当前所选内容的列表。 因为HTML的问题，你有时候并不能每次都提取到文本标签，所以这里做一个说明。 xpath最后的/text()的意思是提取当前标签内的所有文本。 如果你不是只想提取一个内容，而是想提取同类型内容，比如下面的标签。 按照上面的步骤，复制其中一个标签的xpath，会得到以下内容 //*[@id=&quot;krw-tags&quot;]/div/a[1]/text() 我猜聪明的你已经发现如何提取所有标签了，正如上面所说的，上面那行代码提取的是一个列表，只需要将xpath改成下面这样，即可提取当前页面所有标签。 //*[@id=&quot;krw-tags&quot;]/div/a/text() 接下来的计划AJAX数据获取 正则表达式 JSON数据解析 爬虫登录网页 cookie持续登录 加密 ……"},{"title":"给你的网页用上CDN加速","date":"2023-05-28T08:40:23.000Z","url":"/2023/05/28/websitecourse/cdn/","tags":[["cdn","/tags/cdn/"],["域名","/tags/%E5%9F%9F%E5%90%8D/"],["进阶","/tags/%E8%BF%9B%E9%98%B6/"],["避坑","/tags/%E9%81%BF%E5%9D%91/"]],"categories":[["网站","/categories/%E7%BD%91%E7%AB%99/"]],"content":"前言经过之前几步，你已经拥有了一个自己的博客，但是由于GitHub Pages和netlify服务的提供商都在国外，所以可能你的网站就像这样：（测试网站） 时不时连不上或者加载速度慢，数据包丢失等问题很烦。 但是经过本篇CDN教程过后，你的网站可以快成这样： 取决于你的CDN提供商和源站选择 CDN介绍CDN全称Content Delivery Network，內容分发网络。利用CDN最近的服务器响应你的请求再把数据发给你，这样子每次请求就可以不用跑到那么远的源站去请求然后再回来，路程少了自然快了，丢失风险也少了。 现在主要的CDN提供商大都有一套完整的CDN网络，基本上不用操心CDN性能，但是要担心一下你的流量会不会被恶意刷没。 现在中国大陆地区CDN提供商进行CDN加速需要网站域名备案，其他的加速不用，请根据需要选择。 域名备案请自行寻找方法，一般域名提供商就带有备案服务，而且备案过程十分繁琐且冗长。 CDN使用在CDN控制台界面选择添加一个域名加速，选择加速的区域是中国大陆地区还是其他还是全球(只要是包括中国大陆地区的加速都需要备案)。 加速类型选择的话，我们只需要加速一下网页的小文件就行，看着来选就行。 Tips 源站配置的话，我们选择自有源，填写你的GitHub或者netlify网站域名。 回源HOST一定要配置你在GitHub或者netlify的自定义域名，否则会导致回源失败出现404界面。 比如，你填写了GitHub的自定义域名为github.example.cn，你选择的回源host却是example.cn这样会导致GitHub服务器接收到你的CDN服务器请求的数据时，返回数据时回源失败出现404界面。 接下来该配置你的网站缓存策略，如果你是新手不想管那么多，可以直接缓存全部文件。 注意 前提是你的网页内容没有多少文件，如果你的网站动不动图片全部内置服务器请求，全部下载文件也全部放你网站里面，那恐怕你有多少CDN流量都不够你挥霍的。 如果你是图片找图床，整个根目录全部文件加起来也没多大那种到是可以无脑，接下来的交给CDN就行。 接下来到HTTPS，一般CDN进行HTTPS请求都是要收费的，但是不用浏览器又给你报毒，很无语，都什么年代了，HTTP都标配了还搞这一套。如果开启了HTTPS记得去绑定一下证书给CDN，你也不希望你的网站因为CDN原因被报毒吧。 不过好在一般CDN都有免费请求次数，腾讯云是300万次。够一般人的使用需求了，不过还是建议把下面的请求限制做好。HTTP2.0可以根据自行需求配置，这一项可以显著加速网页加载速度，缓解网络堵车。 还有这个TLS版本配置，如果你开启了TLS1.0会导致PCI DSS检测不合规。 建议根据自行的需求设置流量限制，否则保不准哪个网上爬虫能一晚上把你的流量全部爬光，一般只需要配置一下瞬时流量就行，大多数轰炸都是短时间高请求耗光你的流量。 最后，把你的域名CNAME到他提供给你的CDN域名就行，你也可以根据你的CDN服务地域来选择解析结果，你可以给境内境外，各个运营商，各个不同地区配置不同的服务器，也可以解决某些地区访问慢的问题，不过，这些领域CDN可以专业对口，可以放心交给CDN 部署成功后打开控制台看看响应IP 如果是CDN节点那就是没问题了 END 作为博客教程，到这一篇应该算是结束了 接下来的博客应该会转向其他的方向 比如python和C语言以及一些学习小结 敬请期待 "},{"title":"域名注册和解析","date":"2023-05-26T15:58:44.000Z","url":"/2023/05/26/websitecourse/domain/","tags":[["初阶","/tags/%E5%88%9D%E9%98%B6/"],["域名","/tags/%E5%9F%9F%E5%90%8D/"],["避坑","/tags/%E9%81%BF%E5%9D%91/"]],"categories":[["网站","/categories/%E7%BD%91%E7%AB%99/"]],"content":"前言本教程只做基本的指南，属于要有一点基础，不会详细到介绍每个按钮和每一步操作。 只是说明该干什么，哪里干什么会怎么样之类的说明。 以及一些我已经踩过的坑的详细分析。 域名注册 这里一般自己找域名提供商。大多数人会选择国内的。 国内的域名提供商需要实名认证，注册域名不备案也可以。 国外的优点就是不用实名认证了，有些提供商域名价格比国内更低。 域名类型 这里科普一下简单域名知识 example.cn是一个顶级域名。 xxx.example.cn是一个二级域名 xxx.yyy.example.cn是一个三级域名 我们一般注册的是顶级域名，这个顶级域名下面的其他二级域名都可以用。 选择合适的域名注册商，写一个你喜欢的域名，查询看有没有占用，没有就可以正常注册了。 这里尤其要看清后续续费的价格 别看大多数首年优惠就觉得这个域名很便宜，后期续费价格很要命的 国内常见的域名注册商都带有基础域名解析，免费的SSL证书和一些其他相关的服务，不需要额外购买 推荐的一些便宜实惠域名类型 .cn .vip .com.cn .ltd 这部分没什么好说的，根据域名注册商的教程，基本上算是保姆型，生怕你不会那种。 注册完交完钱就可以拥有自己的域名了。不需要网站备案那种时间长又难搞的东西。 这里不需要强制备案是因为域名也可以拿来注册邮箱，而邮箱不需要备案。 如果对于这个邮箱功能有需求的可以自行去摸索一下方法，或者叫这个懒狗–&gt;Felix_SANA更新一篇博客。 设置域名功能解析功能说明下面我统一以你注册了example.cn域名作为例子 这个时候默认你已经部署好了netlify或者GitHub Pages服务，你就有了一个可以访问你博客的网址了。 现在去DNS提供商处添加域名解析，如果是国内的话DNS提供商就集成在你的域名那一块，点击解析或者DNS之类的按钮就可以跳转到域名解析页了。 解析页添加域名解析记录一般有几个参数需要写，主机记录，记录类型，记录值。 主机类型一般都是域名的前缀，填写@就是表示://example.cn，填写www就是://www.example.cn，填写其他的比如gg就是相当于://gg.example.cn。 记录类型就是你这条记录是用来干什么的，这里简单说一些记录：CNAME就是把你的某个域名转移到其他域名上面去，A就是把你的域名转到某个ipv4地址上面，AAAA就是转到ipv6地址上面，下面附各个类型说明。 域名解析记录类型 记录类型 使用目的 A 记录 将域名指向一个 IP 地址。 CNAME 记录 将域名指向另一个域名，再由另一个域名提供 IP 地址（外网地址）。 MX 记录 设置邮箱，让邮箱能收到邮件。 NS 记录 将子域名交给其他 DNS 服务商解析。 SPF 记录 将域名指向发送邮件的服务器，是一种以IP地址认证电子邮件发件人身份的技术，是非常高效的垃圾邮件解决方案。 AAAA 记录 将域名指向一个 IPv6 地址。 SRV 记录 用来标识某台服务器使用了某个服务，常见于微软系统的目录管理。 TXT 记录 对域名进行标识和说明，绝大多数的 TXT 记录是用来做 SPF 记录（反垃圾邮件）。 CAA 记录 授权指定 CA 机构为域名签发 SSL 证书，以防止 SSL 证书错误签发。 HTTPS 记录 将域名指向另一个域名指定值，再由另一个域名提供 IP 地址，就需要添加 HTTPS 记录。 SVCB 记录 新型服务绑定记录类型，允许服务指向多个客户端，并关联自定义参数值。 隐、显性 URL 记录 将一个域名指向另外一个已经存在的站点。 记录值就是你需要进行操作的目标，拿简单的A解析就是填一个ipv4地址，CNAME就是填一个你想要重定向到的域名。 提示 如果你后面都不打算用CDN加速或者对于地址栏显示哪个网址都无所谓的话，可以直接添加两条CNAME记录转到你对应的GitHub网址和netlify网址就行。 如果你打算活用你的域名，接下来的操作你可以为GitHub和netlify添加自定义域名。 解析到你的GitHub网页 在 GitHub 上，导航到您站点的存储库。 在您的存储库名称下，单击 Settings。如果您看不到“设置”选项卡，请选择下拉菜单，然后单击“设置”。 在边栏的“代码和自动化”部分，单击Pages。 在“Custom domain”下，输入您的自定义域，然后单击“Save”。如果您从分支发布站点，这将创建一个提交，将文件添加CNAME到源分支的根目录，如果你还没有做第5步那么这里DNS检查大概率报错，把第5步做完等一段时间刷新就可以发现正常了。 一般情况下注册的域名都不需要理会下面这个注意 注意：如果您的自定义域是国际化域名，则必须输入 Punycode 编码版本。 有关 Punycodes 的更多信息，请参阅国际化域名。 导航到您的 DNS 提供商并创建一条CNAME记录，将您的子域指向您站点的默认域。例如，如果您想为您的用户站点使用子域，www.example.com请创建一个CNAME指向username.github.io 解析到你的netlify网页同样，你可以在你的netlify控制台首页很轻松地找到你对应站点的domain settings，而操作和上面基本差不多，同样是添加CNAME解析和配置自定义域名。 启用HTTPS如果你已经见过你的网站被浏览器认成了这样，那么大概率就是HTTPS出了问题。 首先去你的域名注册商那里申请一个SSL证书，一般都有附带免费SSL证书服务。 申请通过后自行绑定到对应域名处，一般情况下都会自动配置，在我们的演示里面只有netlify在使用自定义域名时需要手动配置证书，如果你是用他那边的域名则不需要。 在自定义域名最下面有个自定义证书，把你刚刚申请的免费证书下载下来，里面的.crt或者.pem文件用记事本打开就是你的证书，.key文件就是你的私钥，全部上传就可以配置好netlify的证书，一些服务器也同理。 恭喜你已经完成了本次教程所有内容 由于内容太多，下次才会更新CDN相关内容 "},{"title":"ANIME RECORD","date":"2023-05-25T14:31:43.000Z","url":"/2023/05/25/record/animerecord/","categories":[["undefined",""]],"content":"最喜欢的动画《孤独摇滚》论孤独摇滚为什么是神？ 要剧情有剧情，要音乐有四首封神live，要校园有学园祭，要整活有一堆眼前一黑的二创，要成长有社恐孤独酱的转变，该有的都有了，制作也没有拉跨，凭什么不能封神？ 孤独摇滚就是神！！！ 最喜欢的剧情《你的名字》相信了解新海诚的都知道，新海诚的剧情在这一部之后都没能达到这个高度，制作也是番剧中的天花板水平，总之好看就完了。 反复看最多次的《轻音少女》不得不说，轻音少女真的是京阿尼在09年送给动画人的一份大礼，放到现在也不输的画质，顶级的乐器出演，细心的手绘，还有最好看的日常和音乐live！！！！ 最虐心的《四月是你的谎言》… …… 写不出什么东西，到今天还是顶不顺，一想起剧情还是意难平。 最感动的《游戏人生：零》如果说我最期待续作的番剧的话，当属《游戏人生》，结果几年几年一过，等到的却是剧场版《游戏人生：零》，优秀的制作，优秀的剧情，总之一切都是那么的好，怎么就是不火呢？ o(TヘTo) 我要在这251秒赌上我的一切！！！ 最治愈的《街角魔族》本来想着一个日常搞笑番能有什么剧情可言，结果被制作组惊到了，推动叙事的方式简直完美，日常也很温馨，一场魔族和魔法少女的战争即将拉开。 校园日常/异类/温馨/绝望的作品《学园孤岛》如果你受不了刺激请不要观看 芳文社作品。 如果稍微有一点感兴趣的话可以先别看任何剧透，简介，解说和弹幕等，直接去看第一集。 然后你就知道我这标题是为什么了 奇怪的搞笑番剧《佐贺偶像是传奇》第一季在A站，第二季在B站。 总之就是很怪，把一些毫不相关的东西结合在一起，居然奇迹般地挺好看，挺佩服制作组的，喜欢整活或者没那么严肃的可以一看，现在我就想看第三季怎么把第二季挖的坑填了。 神·《86~不存在的战区》共23集真的不存在了，大陆不存在这部番，但是是真的好看，细腻的心理描写，环境描写，音乐的适时插入，对于小说的改编，最后动画的效果呈现，简直无敌，感觉我什么描写都是对这部神作亵渎，这时候这个最好形容我的心情 卧槽，牛逼！！ 附我的番剧历史：Blilbili，BGM "},{"title":"GAME RECORD","date":"2023-05-25T05:12:01.000Z","url":"/2023/05/25/record/gamerecord/","categories":[["undefined",""]],"content":"在这里记录我的游戏历史如果有你感兴趣的那我们就是同好了ヾ(≧▽≦*)o不涉及剧透(除非你玩过了)，就算有介绍也只是推荐向的。 话不多说立刻开始 我最喜欢的游戏Outer Wilds(通关时间2021/12/31) 把宇宙和时间那种宏大的美暴力地展示给每一个游玩此游戏的玩家，细细玩下来居然什么剧情都没有，但是你却能清晰记着这里发生过什么事情，很舒服的一款太空探索类型游戏，没有目标，没有教你探索的策划，没有满地图的问号，不过这些问号都在你心里，好奇，想要探索，想要知道，这款游戏能给大部分人一个完美的太空之旅，除了这飞船手感稀烂。 OuterWilds截图 我最喜欢的剧情游戏这里有太多游戏的剧情都值得我排到这个位置，但是我又是个选择困难症，没办法，只好让最近我玩过的最喜欢的剧情游戏放在这里了。 DEATH STRANDING(通关时间2022/2/15) 论小岛秀夫为什么是神？ 他可是预言家 我始终没想到，我居然是在疫情期间有空跑去通关的死亡搁浅，太多巧合让我把这部作品的内核发扬光大抬到了这个位置，还是那个想要做电影的小岛秀夫，还是那个公款追星的小岛秀夫，一切都回来了，故事还是很不错的，慢热，不适合所有人，请酌情入坑。 死亡搁浅截图 我最喜欢的RPG游戏Persona5(通关时间2022/11/25) 前排提示：你本来就不喜欢二次元还有回合制游戏的话得降低期望了。 一流的叙事方式，一波三折的剧情，不断反转的展开，十分合理的养成，相当轻松的恋爱，让人忍不住下线的游戏。细细体验下去感觉制作组也在回合制上面挖出如此的玩法已经也是尽心尽力了。没有说的那么不堪，如果没有上面的问题的话还是推荐各位一试的。 Persona5截图(Switch版) 最喜欢画面风格的游戏Ori and the Will of the Wisps(通关时间2020) 唯美的画风，可爱的精灵，完全不无聊的剧情。如果不是太早玩这个游戏上面肯定有它一席之地。只有一个缺点：太短，完全不够玩。 奥日截屏 最喜欢的galgame千恋*万花(通关时间2023) Ciallo～(∠・ω&lt; )⌒★ 柚子社作品，废萌，萌就完事了。还有其他很不错的galgame，但是秉承同梯队最后玩的优先考虑，还是千恋万花了。 千恋万花截图（如果你想自己体验请千万别打开） 最放松的游戏BLUE REFLECTION(通关时间2022/01) 百合向，无男主，又是一个高中生拯救世界的作品，剧情挺不错的，制作挺烂的，不推荐各位去试！！！！ 蔚蓝反射截图 天花板塞尔达(通关时间：遥遥无期) 似乎不用我去证明这个作品的含金量了，因为我也表达不出来这部作品的好玩之处，推荐各位如果没玩的都去试试。 塞尔达截图 下面是不完整记录表 已通关游戏 Death Stranding（死亡搁浅：不包含导剪），Touhou Luna Nights，Star Wars Jedi：Fallen Order，Terraria，Outer Wilds，FARCRY5，Nekopara ALL，Doki Doki Literature Club!，刀剑神域亡灵凶弹，GTA5，watch dogs1&amp;2，hacknet，ICEY，portal1&amp;2，光明记忆ALL，Tricolour Lovestory，DYING LIGHT，HITMAN1&amp;2，求生之路1&amp;2，中国式家长，RABI-RABI，全网公敌，Lost Ruins，NEEDY GIRL OVERDOSE，Untitled Goose Games，Ori and the Will of the Wisps，A WAY OUT，TITAN FALL2，WWZ，Back 4 Blood，ROAD 96，BLUE REFLECTION，宝可梦剑盾，十三机兵防卫圈，游魂2，纪念碑谷1和2，Noita，艾尔登法环，P5R，Fallout4，神之天平，宝可梦朱紫，千恋万花，Undertale，Plants vs Zombies。 也许已经通关的游戏 死亡搁浅导剪版，Doki Doki Literature Club Plus，彩虹六号：撤离禁区，Plants vs. Zombies，A Plague Tale: Innocence，深海迷航，艾迪芬奇的记忆，极乐迪斯科，Grouded（禁闭求生），Police Simulator: Patrol Officers，METRO（地铁全系列）。 正在通关的游戏 Red Dead Redemption 2，CELESTE，小白兔电商，dishonored（耻辱），HITMAN3，METALLIC CHILD，POLY BRIDGE，ARMA3，MOUNTAIN，CODE VEIN，FIREWATCH，鸢之歌-Singing Iris，Ori and the Blind Forest，YOU and ME and HER a love story（君彼女之恋），DOOM（毁灭战士全系列），HALO（光环全系列），无主之地全系列，while TRUE learn，Love’s Sweet Garnish，丸子与银河龙，BLUE REFLECTION：帝，塞尔达旷野之息，宝可梦阿尔宙斯，马里奥奥德赛，P4G，P3P，P5S，Dying Light2，星之卡比:探索发现，空洞骑士，异度神剑2，ENDER LILIES，CRYSTAR，超级马里奥:奥德赛，林中小女巫，EXO ONE，绯红结系，爱上火车，stray，真愿朦幻馆〜在时间暂停的洋馆里追寻明天的羔羊们〜，只狼，loopers，Tales of the Black Forest，使命召唤14，HITMAN3，DEATHLOOP，OPUS：龙脉常歌，The Elder Scrolls V: Skyrim Anniversary Edition，绯红结系，Devil may cry5，火焰纹章风花雪月，Love Love School Days，Ghostwire: Tokyo，Grim Guardians: Demon Purge，东方夜雀食堂，bloodsained：ritual of the night，INSIDE，LIMBO，魔女的夜宴（0d00），魔法使之夜，塞尔达传说：王国之泪，海王星正传四部曲。 有时候还玩一些杀时间利器游戏：十字军之王III，文明VI，城市：天际线，我的世界（光整些电路烂活）微软模拟飞行2020，Train Sim World3。 平常时不时玩的多人联机： battlefield5&amp;2042&amp;3 ，GTA5，L4D2，地平线4，Splatoon（乌贼娘）3，动物森友会，Nintendo Switch Sports，MC。 "},{"title":"Markdown基础语法","date":"2023-05-14T06:32:15.000Z","url":"/2023/05/14/websitecourse/MarkdownText/","tags":[["语法","/tags/%E8%AF%AD%E6%B3%95/"],["Markdown","/tags/Markdown/"],["实用","/tags/%E5%AE%9E%E7%94%A8/"]],"categories":[["网站","/categories/%E7%BD%91%E7%AB%99/"]],"content":"前言本教程只做基础相关语法用法的说明，不涉及实操和过于硬核的操作，请放心观看。 实际操作请自行找Markdown编辑器或者支持Markdown显示的地方进行练习。 (悄悄说个事，本评论区支持Markdown文本显示) 只要带有这个图标的地方，都支持Markdown文本。 标题最简单的方法是利用 # 来标识出标题区域以及格式，# 必须和后面的标题文本之间隔至少一个空格，最多有六个级别的标题文本。 特殊用法 使用 = 来标记一级标题 使用 - 来标记二级标题 正文格式段落如果你用的不是特殊Markdown编辑器来编辑段落的话，比如GitHub的md文件编写，会发现和你日常打字有很明显的一点不同就是段落区分。 正常我们回车就新建一个段落而在Markdown里的规则是上一段末尾有两个空格以上，你再按回车才是新一个段落，否则就是同一段换行继续写，显示出来也是在同一段。 另一个分段方法就是，两个段落之间隔一个空行。这样子Markdown显示出来也是两段不同段落。 分段总结 段落末尾跟两个空格以上换行。 两个段落之间隔一个空行。 直接使用Markdown编辑器就可以实现用Word的方法来写Markdown。 字体Markdown内置以下几种字体 斜体文本斜体文本粗体文本粗体文本粗斜体文本粗斜体文本 分割线你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。 11 22 33 44 ----------除了可以用来当分割线还可以拿来当二级标题。 一些特殊用法HTMLMarkdown几乎支持全部的HTML标签，方便各位的编辑，以后如果有什么Markdown标签不能实现的文本效果时，就可以看看HTML标签能不能解决你的问题啦。 举个栗子： 居中 删除线 我被删除啦 下划线因为下划线这个还是蛮重要的我在这里还是说一下，只可惜Markdown并没有内置此类标签，我们只好用HTML标签的 &lt;u&gt; 来实现啦。 下划线文本 脚注因为我博客对于脚注的支持不是很友好，所以网站里面演示不太行。我录了一个演示GIF你们可以看看。 请解释我的作用^脚注1 最好别点上面的那个脚注1超链接 列表Markdown里支持有序列表和无序列表。 无序列表使用星号*、加号+或减号-作为列表标记，标记得和内容隔一个空格。 1 2 3 1 2 3 1 2 3 有序列表就比较好懂了，数字加上 . 就可以了，还是和无序一样得隔一个空格。 a b c 综合演示 第一层 箱子 石子 文件夹 我 他 罐子 第二层 完毕 区块区块可以用在你想要用的绝大部分地方，直接上演示吧，开深色模式看得清楚一点，在页面右下角开启。 区块引用 01 02 03 最外层 第一层嵌套 第二层嵌套 表格Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。 格式如下： 表头 表头 单元格 单元格 单元格 单元格 我们可以设置表格的对齐方式： -: 设置内容和标题栏居右对齐。 :- 设置内容和标题栏居左对齐。 :-: 设置内容和标题栏居中对齐。 对齐方式得放在第一行下面 例如： 左对齐 右对齐 居中对齐 单元格 单元格 单元格 单元格 单元格 单元格 代码框上面你也见到了，黑黑的一坨，里面不管些什么都不会被网页当成语法来执行的框体就是代码框啦。 还有另外一种更为轻巧的框体，用两个反引号包裹住的，长这样 就是这样 。 第一种代码框用```来包裹住，用法如下： 链接使用方法如下： 例如： Felix_SANA ‘S BLOG 或者  图片和链接类似，只是需要在链接前加一个 ! ，用法如下 结束啦ヾ(≧▽≦*)o 由于上一篇有人吐槽说太长了，这次尽可能压缩了一下重点 不知各位观感如何呢？ 未完之事1. Markdown语法教程( √ )2. 域名注册3. CDN加速(让你的博客本来一般的网速直接起飞)"},{"title":"使用hexo和Pages服务搭建个人博客","date":"2023-05-12T06:11:15.000Z","url":"/2023/05/12/websitecourse/hexoblogsinit/","tags":[["初阶","/tags/%E5%88%9D%E9%98%B6/"],["hexo","/tags/hexo/"],["blog","/tags/blog/"]],"categories":[["网站","/categories/%E7%BD%91%E7%AB%99/"]],"content":"一、前言你是否想过以最低成本拥有一个属于自己的个人网站、一个可以记录一些东西的地方？ 本教程可以做到让你不用买服务器，不必实名认证，尽可能简单地搭建一个博客网站。 相信你已经看到我的个人博客网站了，下面是一些其他的个人博客： Argvchs の小窝 糖羽仙 (tangyuxian.com) 岛 (gitee.io) 他们都是基于hexo来搭建的博客，虽然还有基于其他甚至是空气的，我们这里选用hexo来进行教程。 二、环境安装1. 安装nodejs 下载地址： 由于能来看我这篇教程大部分人的人最常用的系统都是Windows，所以本教程以及接下来的平台都是基于Windows。 这里选择Windows的msi安装包进行安装，版本选自己系统的版本。 接下来我们运行安装包，默认安装在C盘。 记得在这一步选择上Add to PATH，然后接着下一步。 2. 安装GIT 下载地址： 备用下载地址(2.40.1)：密码 : fdww 官网点击这里即可下载最新版 接着运行下载到的安装包(安装位置可以选个自己喜欢的) 这里后面的步骤不需要过多配置，全部默认点next就行。 安装完后，打开PowerShell或者cmd，输入 git -v 回车，如果返回了安装的git的版本号没有报错那就是安装成功了。 或者，你可以在桌面右键，查看一下有没有Git Bash Here的选项，如果有那就应该是没有问题的。 3. 检测安装 这里推荐如果你系统版本较新，有一个名为Terminal(终端)的应用安装在你电脑上面，最简单的检查办法还是桌面右键如图所示：在终端中打开。 如果你有，那么建议你直接用这个应用取代掉这以后所有需要用到Git Bash的地方。 如果你没有想要使用那也可以去Microsoft store下载一个，也可以直接用Git Bash的窗口。 接下来继续正事 打开桌面右键打开Git Bash窗口，分别执行以下命令： 如果如图所示成功输出了版本号，那就证明以上安装步骤成功。如果没有则要再安装一次，记得勾选Add to PATH，或者手动为nodejs添加环境变量，安装完后记得重启你的Git Bash窗口。 4. 安装cnpm 这个操作是为了以后安装时避免国内安装速度过慢加上去的，如果你的网络环境”非常好”，可以考虑直接跳过该步骤。并且下文所有命令最前面是cnpm的可以替换成npm。 在上面窗口继续执行下面的命令： 安装完后再输入一下 cnpm -v 验证一下安装是否成功，如果正常输出了cnpm的版本号那么恭喜你安装成功。 三、安装HEXO并成功启动本地博客网站1. 安装HEXO在Git Bash窗口输入下面的命令行直接安装HEXO： 没有报错即是成功。警告不算报错。 2. 初始化博客新建一个文件夹，一定要是空的，这里面放你以后博客的工程文件，选个好点的位置，我这里选的是D盘下面一个blog的文件夹。在你选好的文件夹空白位置右键，打开Git Bash窗口 一定要确认一下是不是在当前目录下面，不然后续执行的命令难搞。 确认好之后执行 hexo init 。 如果你网络好，可以直接成功，那么这一点下面操作你就不需要做了。 不过如果你卡在Install dependencies这一步的话，那就得手动Ctrl＋C结束命令。继续本点教程。 使用 cnpm install 命令可以帮你把剩下没做完的操作做完。 注意 大部分情况下这样子就已经可以完美完成了。 但是有些地方网络条件实在不好，以下分几种情况： 卡在cloning这一步没有后续的响应了。 用 cnpm install 也还是卡住动不了。 其他情况 对应点的解决方案如下： 手动clone仓库，前往 点击右上角的code然后下载zip包解压到你的目录下面(可以用点魔法)。 然后接着下一步使用 cnpm install 来帮助你安装依赖文件。 这个是在没辙了，cnpm都救不了你我也没法子，建议看运气网络好的时候试试吧。 请邮箱或者下方评论区说明情况。 3. 本地运行博客网站如果上面都没有问题的话，恭喜你，你可以看到你的网站了，在你的本地博客目录下面打开Git Bash窗口然后输入 hexo s 来运行hexo服务器，然后在浏览器输入这里的网址就可以看到界面了。 如果成功出现了上面的网页，那证明你已经成功在本地运行了一个默认的HEXO博客网站。 四、更换博客主题1. 寻找一个合适的主题 如果你觉得默认主题还行，那就没有下面这些的事了。 hexo主题网址： ，基本所有主题都会收录到这个网页里面，根据需要查找下载即可。 每一个主题一般都有三个部分，即预览界面，项目地址，配置教程。 新手最好得找一个三部分齐全的主题进行采用。 一般从主题网址进入的网页一般都是预览界面， 项目地址就放在某个文章或者某个按钮下面，这个得找找。 2. 主题安装打开项目地址后，点击右上角的code，选择clone网址或者选择下载zip包。 在刚刚的博客本地目录下面打开Git Bash窗口，根据你拿到的方法进行下面操作： 点击↓↓对应的方法即可 方法① 在本地博客文件夹下面打开Git Bash窗口，执行下面的命令 例如： 上面命令表示把你刚刚复制的网址对应的项目，拷贝到你的本地博客文件夹下面themes/T1文件夹里。 方法② 你下载的zip包自行解压缩，把文件全部解压到本地博客文件夹的/themes/文件夹下面的子文件夹里 子文件夹的名字可以自己起一个喜欢的。 举个例子：/themes/T1 在T1文件夹里面有刚刚GitHub主页的全部的项目文件。 文件夹大概长这样： 3. 修改HEXO配置文件(blog/_config.yml) 配置文件初始应该是这样的： 配置文件部分对应值意思 author值对应的是作者名 title对应的是博客名 language是网站语言 theme是在本地博客目录下面的文件夹的名称，你写哪个文件夹用的就是哪个文件夹里面的主题项目文件，不可以写不存在的文件夹。 你填的值和前面的名称冒号之间至少得有一个空格 而且你不能在你填的值里面加上英文的冒号 将theme的值改成你下载到themes目录里面的项目文件夹的名称 然后在本地博客文件夹运行下面的命令： 按照之前的方法前往他提示你的网址就可以预览到效果了。 有的主题还需要安装它需要的依赖，所以在你更换之后是暂时无法预览的，这一般都会在主题的文档里面提到，只有安装它的依赖之后才可以正常预览。 4. 修改主题配置文件(blog/themes/xxx/_config.yml)注意别和上面的HEXO配置文件弄混 这部分请参照上方讲过的主题三部分其中之一的配置教程 一般主题都带有配置教程，请自行移步观看 一般都会详细讲解每一个配置项对应的作用，活用 hexo s 命令可以在本地预览每一个配置项被修改后的实施效果。 建议新手挑一个比较简单的进行配置练手，这样子一步一步上升不至于开头放弃。 五、接下来该写点东西了吧？在博客本地文件夹下面执行 文章文件名一般写英文，这个不是文章的标题，仅用作区分每个文章，而且文章和文章之间一般不能同名。 在博客本地文件夹下面的source/_posts文件夹里面找到你刚刚新建的文章，后缀名是 .md 你可以用各种文本编辑器来打开这个文件，不过最好用专门的文本编辑器进行编辑，因为各种语法结构普通编辑器不能很好预览效果。 这里给各位推荐Gridea和Typora(需要付费)，下载方式请自行寻找。 实在不济用vscode弄个插件也凑合用着。 使用Markdown编辑器打开你上面创建的文件，里面会有几样信息 头信息 title 文章标题 date 创建日期 tag 文章标签 我猜你眼力应该比我好，看到了title上面和tags下面区域颜色和中间的不一样 你需要在灰色框里面填写文章的头信息，白色区域里面写你的正文。 这里和上面一样，利用 hexo s 可以在本地实时预览你写的东西。 我的下一篇博客会说明如何写Markdown文章 六、部署你的博客现在你看到的博客，全部只能在本地查看，如何将其上传到网络里面让互联网朋友们看到这篇文章呢？ 下面有两个方法 GitHub 国内访问速度一般 不需要花钱 域名可自定义 可绑定域名 全面支持HTTPS Netlify 国内访问速度不稳定 不需要花钱 域名可自定义 可绑定域名 绑定域名后开启HTTPS操作繁琐 1. GitHub部署首先就是注册账号，创建仓库 仓库名必须为你的github用户名＋github.io Netlify部署提示(如果你正在GitHub部署请忽略本提示)： 如果你只是想在Netlify上面部署页面而不想再GitHub上面部署页面的话 这里的仓库名称你可以随便写。 仓库详细设置如下，必须为公共仓库。 由于HEXO上传项目利用的是deploy，还得创建一个git秘钥 申请该秘钥的电脑得和你上传博客的电脑是同一台电脑 在任意一个目录打开Git Bash，执行下面的命令，一路回车就完事了。 把上面的xxx@example.com替换为你自己的GitHub邮箱 然后执行下面的命令 他会输出一串你的秘钥，复制输出的所有信息。 进入你的GitHub网站，点击头像，settings，SSH and GPG keys，点击New SSH key title用来给你提示这个key用来干什么的，key type就选图中这个 key里面就写你刚刚复制到的内容。 保存后在你的电脑上面打开Git Bash，执行下面命令 会提示一行你要继续连接吗？输入yes就行了。 打开你的xxx.github.io项目仓库，拷贝项目的SSH地址。 打开你的HEXO配置文件，修改deploy参数 在博客根目录下打开git bash 如果你是第一次使用git，请分别执行下面的命令： yourname是你的名字 youremail是你的邮箱 然后执行下面的命令来安装上传插件 然后在博客本地文件夹下打开Git Bash，输入以下命令就可以上传了 请返回继续观看部署教程 以下是一些常用的HEXO命令，请根据情况使用： HEXO基础命令 hexo server #Hexo 会监视文件变动并自动更新，除修改站点配置文件外,无须重启服务器,直接刷新网页即可生效。 hexo server -s #以静态模式启动 hexo server -p 5000 #更改访问端口 (默认端口为4000，’ctrl + c’关闭server) hexo server -i IP地址 #自定义 IP hexo clean #清除缓存 ,网页正常情况下可以忽略此条命令,执行该指令后,会删掉站点根目录下的public文件夹 hexo g #生成静态网页 (执行 $ hexo g后会在站点根目录下生成public文件夹, hexo会将”/blog/source/“ 下面的.md后缀的文件编译为.html后缀的文件,存放在”/blog/public/ “ 路径下) hexo d #将本地数据部署到远端服务器(如github) hexo init 文件夹名称 #初始化XX文件夹名称 npm update hexo -g#升级 npm install hexo -g#安装 node-v #查看node.js版本号 npm -v #查看npm版本号 git --version #查看git版本号 hexo -v #查看hexo版本号 上传成功后，打开你的GitHub项目，点击settings，在下面找到GitHub Pages 这里的branch如果你上面和我配置的一样是master就选这个，否则选你填的那个。 如果你的上传成功，分支又选对了的话，在这里头部应该就能看到类似于这种的提示，点击这个网址就可以看到你的博客网站了。 2. Netlify部署请先阅读 1. GitHub部署教程，直到看到以下提示。 请返回继续观看部署教程 或者你也可以把上面全部做完，再做这个，这样子你的博客就同时在两个网站上面部署了。 官网链接： 建议直接登录你刚刚的GitHub进行仓库快捷导入，然后授权给Netlify访问你的GitHub仓库，选择你刚刚上传代码的GitHub仓库进行部署。 如果你刚刚按照我的步骤来上传的代码的话，下面的框都不用填，选择好分支就行，每次向GitHub更新博客，这里会自动部署，完全不用操心，很舒适。 点击Deploy site就自动进行部署了。 回到主页看到网站部署成功就可以用它给的网址访问你的网站了。 感觉他自动分配的网址不好记？点击site settings，然后点击Domain management，就可以看到刚刚不舒服的网址了， 右边的options可以进行网址自定义。 恭喜你走到这一步 成功啦o(￣▽￣)ブ 你已经完成了本教程所有内容 成功搭建了一个可以阅读的个人网站 进阶教程在未来我的博客更新 七、未完之事1. Markdown语法教程(下一篇博客安排)2. 域名注册3. CDN加速(让你的博客本来一般的网速直接起飞)"},{"title":"了解一只广东野槌蛇","date":"2023-05-10T14:51:36.000Z","url":"/2023/05/10/info/AboutME/","tags":[["介绍","/tags/%E4%BB%8B%E7%BB%8D/"],["说明","/tags/%E8%AF%B4%E6%98%8E/"]],"categories":[["说明","/categories/%E8%AF%B4%E6%98%8E/"],["关于我","/categories/%E8%AF%B4%E6%98%8E/%E5%85%B3%E4%BA%8E%E6%88%91/"]],"content":"About阴暗地爬行中 一个普普通通大学生(牲) 应该会不断更新这个blog，技术，生活，近况等。 现在在学习一些很杂的东西，基本上感兴趣的就会想办法弄弄，比如这个blog网站就是学习之余摸出来的。 秉承着利用我一切的空余时间把东西弄到最好的习惯，你现在看到的东西就是消耗我差不多所有空闲时间弄出来的。虽然不怎么样，但是却是我的最好。 互联网上绝不吵架，你要是和我吵我马上删评，你说的都对，纯社恐一个。 ACG爱好者， bangumi可以看到我2023年以后的状态，有兴趣可以 steam扩个列，让我看看你在玩什么游戏啊。 HoldPC : DELL G15 5511 CPU : i7-11800H GPU : RTX 3060 Laptop 其他设备 :SWITCH续航版 一大堆没什么用的塑料小人 异常混乱的大脑 最后还有一点的游戏卡带。 Like纯单机党，偶尔玩一些PVE，PVP暂时只能接受喷射战士3，我是又菜又社恐。 喜欢2d游戏，尤其是剧情画风好的横版过关。还喜欢探索游戏，探索未知真的很爽好吧，所以我什么时候才能玩到下一个星际拓荒呢？ 喜欢搞点新奇的东西，成功了会很开心。 如何找到这只野槌蛇？高强度出现在小黑盒，有时会出现在B站，不过要是想强行捕捉的话可能会让它从这个区域跑掉就再也见不到了。"}]